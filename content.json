{"meta":{"title":"刘远山个人技术博客","subtitle":"你还有很多未完成的梦，还有什么理由停下脚步......","description":"刘远山个人技术博客","author":"Alan","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-03-16T13:03:08.000Z","updated":"2019-03-16T13:03:08.505Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Git 冲突解决","slug":"git-file","date":"2019-03-18T06:54:24.000Z","updated":"2019-03-18T07:03:43.972Z","comments":true,"path":"2019/03/18/git-file/","link":"","permalink":"http://yoursite.com/2019/03/18/git-file/","excerpt":"在Git中，出现的冲突一般情况下都是两个分支之间的冲突。指的是两个已经提交的分支的相同文件相同位置的的不同操作进行了合并。例如：有一个dev开发分支，此时我们在dev这个分支开发1git checkout -b dev 修改了1.php文件的第一行添加信息如：echo ‘cang’;然后在dev分支进行提交切换到master分支1git checkout master","text":"在Git中，出现的冲突一般情况下都是两个分支之间的冲突。指的是两个已经提交的分支的相同文件相同位置的的不同操作进行了合并。例如：有一个dev开发分支，此时我们在dev这个分支开发1git checkout -b dev 修改了1.php文件的第一行添加信息如：echo ‘cang’;然后在dev分支进行提交切换到master分支1git checkout master 在master分支上1.php文件的第一行也添加添加信息如：echo ‘bo’;然后在master分支进行提交 master分支和dev分支各自都分别有新的提交。Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。1git merge dev 说明:必须手动解决冲突后再提交。git status可以提示冲突的文件。git log –graph –pretty=oneline –abbrev-commit 查看分支的合并情况。最后开发完毕可以删除dev分支1git branch -d dev 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。冲突发生的时候,最好能联系一下开发的人员,一起解决冲突。仔细对比,取综合的并集,就是尽量把所有不同的文件保留,共同的只留一份。多人协作开发的时候,如果出现了你没有改过的文件跟你冲突了,一定要去找到当事者,说清楚是如何冲突,然后协商解决,千万不要擅自拉别的分支去试图解决冲突,或找文件覆盖。当开发任务比较多,又建议开多个分支,分别进行开发。","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[]},{"title":"Git学习文档的理解","slug":"hexo-page","date":"2019-03-17T06:18:57.000Z","updated":"2019-03-18T06:52:55.673Z","comments":true,"path":"2019/03/17/hexo-page/","link":"","permalink":"http://yoursite.com/2019/03/17/hexo-page/","excerpt":"前言Git与GitHub的区别Git是一个版本控制器而GitHub是一个使用了Git开发的，是一个面向开源及私有软件项目的托管平台 Windows 平台上Git运行环境安装1.在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：安装包下载地址 TortoiseGit图标软件TortoiseGit-2.4.0.2-64bit.msi安装(未提供安装包，可在百度搜索进行下载) 语言包软件TortoiseGit-LanguagePack-2.4.0.0-64bit-zh_CN.msi安装(未提供安装包，可在百度搜索进行下载)","text":"前言Git与GitHub的区别Git是一个版本控制器而GitHub是一个使用了Git开发的，是一个面向开源及私有软件项目的托管平台 Windows 平台上Git运行环境安装1.在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：安装包下载地址 TortoiseGit图标软件TortoiseGit-2.4.0.2-64bit.msi安装(未提供安装包，可在百度搜索进行下载) 语言包软件TortoiseGit-LanguagePack-2.4.0.0-64bit-zh_CN.msi安装(未提供安装包，可在百度搜索进行下载) Git 工作区、暂存区和版本库的理解1.工作区：本地电脑开发时创建的一个文件夹2.暂存区：暂存区可以理解为一个目录或者索引(index)3.版本库：生成仓库后工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 Git 创建仓库初次运行Git前的配置当初次运行Git时需要设置Git的环境变量。此设置只需设置一次，后面再使用不用再设置。配置邮箱地址和用户名将在版本库提交时作为开发者的用户名和邮箱地址。 设置Git的环境变量的设置在全局文件，用户主目录下的.gitconfig保存着。告诉Git当前用户的邮箱地址git config –global user.email 邮箱地址告诉Git当前用户的姓名git config –global user.name “你的名字”例子12$ git config --global user.eaiml 1019213039@qq.com$ git config --global user.name liuyuanshan 版本库的初始化git initGit 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。创建初始化一个test的仓库1$ git init test git 常用命令git add 添加至暂存区git add命令实现对指定文件的跟踪，并放入到暂存区中。git add 后面跟的是文件，跟踪的是当前目录下的该文件。如果git add 后跟的是目录路径，递归跟踪该目录下的所有文件。命令1$ git add . git commit 提交git add 把文件放入暂存区，需要再执行git commit命令完成提交，这样就放入仓库当中。在提交的过程中需要加一个-m选项，输入提交说明，这个选项必不可少。在git提交时，如果在命令行中没有提供说明，也就是没有使用-m选项参数，那么git会打开一个默认的编辑器，要求输入提交说明，输入完毕后保存退出即可。git commit –amend 提交撤消操作命令1$ git commit -m '版本1.0提交至仓库' 显示工作区文件状态git status -s 或 git status –short标记?? 新添加的未跟踪文件A 新添加到暂存区中的文件M 修改过的文件。M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。命令1$ git status -s git clone 克隆版本库git clone [url] 自定义的名称例子1$ git clone git@github.com:schacon/simplegit.git git push 推送到远程仓库1$ git push origin master git pull 从远程仓库拉取1$ git push https://github.com/aircloud/hexo-theme-aircloud.git Git分支查看所有分支1git branch 创建分支例如创建dev分支1git branch dev 切换分支1git checkout dev 合并分支当我们在dev上开发某功能，并测试通过后，可以把dev的内容合并到master分支。首先切换到master分支。再合并dev分支，使用1git merge dev 删除分支git branch -d 分支名称1git branch -d dev 快速创建和切换分支#创建dev分支并立即切换到dev分支起到了git branch dev和git checkout dev的共同作用1git checkout -b dev 第三方Git版本库托管平台 GitHub的使用使用SSHSSH是建立在应用层和传输层基础上的安全协议，其目的是专为远程登录会话和其他网络服务提供安全性的保障，用过SSH远程登录的人都比较熟悉，可以认为SSH是一种安全的Shell。SSH登录是需要用户名和密码的，要实现无密码登录，就需要创建SSH 密钥（ssh key），SSH 密钥可以认为是和另一台电脑通信时的唯一的识别证，SSH 密钥对可以让我们方便的登录到 SSH 服务器，而无需输入密码。GIT源代码管理就是使用此种安全机制。检查是否生成过ssh 密钥，生成ssh 密钥后，会在当前用户的根目录下创建.ssh目录(C:\\Users\\Administrator\\ .ssh)。切换到.ssh目录，如果.ssh目录则会切换到对应目录，不存在会有相关提示。1cd ~/.ssh 或者使用ls命令检查是否存在1ls -l ~/ 使用ssh-keygen命令生成ssh 密钥1ssh-keygen -t rsa 或生成时添加注释ssh-keygen -t rsa -C “我的SSH密钥”说明：生成ssh 密钥后，可以到~/.ssh目录下查看相关文件，一般来说ssh 密钥会包含id_rsa和id_rsa.pub两个文件，分别表示生成的私钥和公钥。将~/.ssh/id_rsa.pub内容复制到源代码管理服务器即可实现git的无密码管理","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[]}]}